using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using VYSA.Domain.Abstract;
using VYSA.Domain.Concrete;
using VYSA.Domain.Entities;
using VYSA.Web.Models;

namespace VYSA.Web.Services
{
    public class TeamService
    {
        private UnitOfWork unitOfWork;

        public TeamService(IUnitOfWork _unitOfWork)
        {
            this.unitOfWork = (UnitOfWork)_unitOfWork;
        }

        public IEnumerable<Team> GetTeams()
        {
            return unitOfWork.TeamRepository.Get(a => a.IsActive);
        }

        public IEnumerable<TeamListViewDTO> GetTeamListViewDtos(int seasonId)
        {
            var teamListViewDtos = new List<TeamListViewDTO>();
            var teams = unitOfWork.TeamRepository.Get(b => b.IsActive && b.SeasonID == seasonId, null, "Division, Roster, TeamCoaches, TeamParentReps").ToList();
            teams.ForEach(e => teamListViewDtos.Add(e.ConvertToListViewDTO(unitOfWork)));
            return teamListViewDtos;
        }

        public TeamDTO GetTeam(int id)
        {
            var team = unitOfWork.TeamRepository.GetByID(id);
            return team == null 
                ? new TeamDTO { AvailableDivisions = new DivisionService(unitOfWork).GetDivisionDropdownVms() } 
                : team.ConvertToDto(unitOfWork);
        }

        public TeamDTO UpdateTeam(TeamDTO updatedTeamDto, string lastUpdateBy)
        {
            var team = unitOfWork.TeamRepository.GetByID(updatedTeamDto.Id);
            if (team == null) return null;

            //do update
            team.UpdateValuesFromDTO(updatedTeamDto, lastUpdateBy, false);

            unitOfWork.TeamRepository.Update(team);
            unitOfWork.Save();

            return updatedTeamDto;
        }

        public TeamDTO AddTeam(TeamDTO newTeamDto, string lastUpdateBy)
        {
            Team team = new Team().UpdateValuesFromDTO(newTeamDto, lastUpdateBy, true);
            unitOfWork.TeamRepository.Insert(team);
            unitOfWork.Save();

            return team.ConvertToDto();
        }

        public TeamDTO SoftDeleteTeam(int id)
        {
            var team = unitOfWork.TeamRepository.GetByID(id);
            if (team == null) return null;

            team.IsActive = false;
            unitOfWork.TeamRepository.Update(team);
            unitOfWork.Save();

            return team.ConvertToDto();
        }
    }
}