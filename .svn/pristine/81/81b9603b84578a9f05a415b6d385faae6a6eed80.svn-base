using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using VYSA.Domain.Abstract;
using VYSA.Domain.Concrete;
using VYSA.Domain.Entities;
using VYSA.WebApi.Models;

namespace VYSA.WebApi.Services
{
    public class PlayerService : BaseService
    {
        private UnitOfWork unitOfWork;

        public PlayerService(IUnitOfWork _unitOfWork)
        {
            this.unitOfWork = (UnitOfWork)_unitOfWork;
        }

        public Int32 GetActivePlayerCount()
        {
            return unitOfWork.PlayerRepository.Get(b => b.IsActive).Count();
        }

        public IEnumerable<PlayerDTO> GetActivePlayers()
        {
            var list = new List<PlayerDTO>();
            unitOfWork.PlayerRepository.Get(b => b.IsActive)
                   .ToList().ForEach(x => list.Add(x.ConvertToDto(unitOfWork)));
            return list;
        }

        public IEnumerable<PlayerDTO> GetPlayersByRosterFilter(FilterDTO filterDto)
        {
            var list = new List<PlayerDTO>();

            var teamDto = new TeamService(unitOfWork).GetTeamDto(filterDto.LookupId);
            var playerIdList = new List<Int32>();
            if (teamDto.Roster != null)
            {
                playerIdList = teamDto.Roster.Select(x => x.PlayerId).ToList();
            }
            unitOfWork.PlayerRepository.Get(b => b.IsActive && !playerIdList.Contains(b.Id) &&
                                                (b.FirstName.StartsWith(filterDto.SearchTerm) || b.LastName.StartsWith(filterDto.SearchTerm)))
                   .ToList().ForEach(x => list.Add(x.ConvertToDto(unitOfWork)));
            return list;
        }

        public IEnumerable<PlayerInGridViewDTO> GetListViewPlayers(PagingFilterDTO pfDto)
        {
            Func<IQueryable<Player>, IOrderedQueryable<Player>> defaultOrderingFunc =  
                            query => query.OrderBy(player => player.DateOfBirth);

            var listViewPlayerDtos = new List<PlayerInGridViewDTO>();

            var playerData = unitOfWork.PlayerRepository
                .Get(b => b.IsActive, defaultOrderingFunc, "PlayerGuardians").ToList();

            var originalSkipCount = (pfDto.PageNum - 1) * pfDto.NumRecs;
            var skipCount = playerData.Count < originalSkipCount 
                            ? originalSkipCount - playerData.Count 
                            : originalSkipCount;

            var players = playerData.Skip(skipCount)
                                    .Take(pfDto.NumRecs).ToList();

            players.ForEach(x => listViewPlayerDtos.Add(x.ConvertToListViewPlayerDTO(unitOfWork)));
            return listViewPlayerDtos;
        }

        public PlayerDTO GetPlayer(int id)
        {
            var player = unitOfWork.PlayerRepository.Get(b => b.Id.Equals(id), null, "PlayerGuardians").SingleOrDefault();
            return player == null ? null : player.ConvertToDto(unitOfWork);
        }

        public PlayerDTO UpdatePlayer(PlayerDTO updatedPlayerDto, string lastUpdateBy)
        {
            var player = unitOfWork.PlayerRepository.GetByID(updatedPlayerDto.Id);
            if (player == null) return null;

            //do update
            player.UpdateValuesFromDTO(updatedPlayerDto, lastUpdateBy, false);

            unitOfWork.PlayerRepository.Update(player);
            unitOfWork.Save();

            return updatedPlayerDto;
        }

        public PlayerDTO AddPlayer(PlayerDTO newPlayerDto, string lastUpdateBy)
        {
            var player = new Player().UpdateValuesFromDTO(newPlayerDto, lastUpdateBy, true);

            unitOfWork.PlayerRepository.Insert(player);
            unitOfWork.Save();

            //make sure they all have PlayerIds
            newPlayerDto.Guardians
                .ToList().ForEach(x => x.PlayerId = player.Id);

            //add all the players' guardians
            new PlayerGuardianService(unitOfWork)
                .AddPlayerGuardians(newPlayerDto.Guardians, lastUpdateBy);

            return GetPlayer(player.Id);
        }       

        public PlayerDTO SoftDeletePlayer(int id, string lastUpdateBy)
        {
            var player = unitOfWork.PlayerRepository.Get(b => b.Id.Equals(id), null, "PlayerGuardians").SingleOrDefault();
            if (player == null) return null;

            player.IsActive = false;
            player.LastUpdateUtc = DateTime.UtcNow;
            player.LastUpdateBy = lastUpdateBy;
            unitOfWork.PlayerRepository.Update(player);

            //deactivate the PlayerGuardians as well. 
            player.PlayerGuardians.ToList().ForEach(x =>
            {
                x.IsActive = false;
                x.LastUpdateUtc = DateTime.UtcNow;
                x.LastUpdateBy = lastUpdateBy;
            });
            player.PlayerGuardians.ToList().ForEach(x => unitOfWork.PlayerGuardianRepository.Update(x));

            unitOfWork.Save();

            return player.ConvertToDto(unitOfWork);
        }

        public PlayerGuardianDTO AddPlayerGuardian(PlayerGuardianDTO playerGuardianDto, string lastUpdateBy)
        {
            return new PlayerGuardianService(unitOfWork)
                .AddPlayerGuardian(playerGuardianDto, lastUpdateBy);
        }

        public PlayerGuardianDTO UpdatePlayerGuardian(PlayerGuardianDTO playerGuardianDto, string lastUpdateBy)
        {
            return new PlayerGuardianService(unitOfWork)
                .UpdatePlayerGuardian(playerGuardianDto, lastUpdateBy);
        }

        public ICollection<PlayerInGridViewDTO> GetPlayersFilter(PlayersFilteringParametersDto dto)
        {
            QueryObject queryObject = BuildFilterQuery(dto, false);
            return unitOfWork.Context.Database.SqlQuery<PlayerInGridViewDTO>(queryObject.Query, queryObject.FilterParameters.ToArray()).ToList();
        }

        public int GetPlayersFilterCount(PlayersFilteringParametersDto dto)
        {
            QueryObject queryObject = BuildFilterQuery(dto, true);
            return unitOfWork.Context.Database.SqlQuery<int>(queryObject.Query, queryObject.FilterParameters.ToArray()).ToList().First();
        }

        private QueryObject BuildFilterQuery(PlayersFilteringParametersDto dto, bool count)
        {
            var filterConditionList = new List<string>();
            var filterParameters = new List<object>();
            var orderBy = string.Empty;

            // Where Clause
            BuildFilterWhereClause(dto, out filterConditionList, out filterParameters);

            if (!count)
            {
                // Paging Params
                AddPagingParameters(dto, ref filterParameters);

                if (string.IsNullOrEmpty(dto.OrderByFieldName)) dto.OrderByFieldName = string.Empty;

                #region Ordering
                switch (dto.OrderByFieldName.ToLower())
                {
                    case "firstname":
                        orderBy += "[FirstName]";
                        break;
                    case "lastname":
                        orderBy += "[LastName]";
                        break;
                    case "dateofbirth":
                        orderBy = "[DateOfBirth]";
                        break;
                    case "age":
                        orderBy = "[Age]";
                        break;
                    case "guardians":
                        orderBy = "[Guardians]";
                        break;
                    default:
                        orderBy = "[Id]";
                        break;
                }

                orderBy += (dto.Ascending == null || dto.Ascending) ? " ASC" : " DESC";

                #endregion
            }

            #region Select
            // Select Clause
            var sql = count ?
                string.Format(@"SELECT COUNT(p.[Id])
                                FROM [dbo].[Players] p 
                                WHERE {0}", string.Join(" AND ", filterConditionList))
                :
                string.Format(@"DECLARE @now AS DATETIME = GETDATE()
                                SELECT * 
                                FROM (
	                                SELECT ROW_NUMBER() OVER (ORDER BY {1}) AS RowNum, *
	                                FROM (
		                                SELECT ROW_NUMBER() OVER (PARTITION BY [Id] ORDER BY {1}) AS PartNum, *
		                                FROM (
			                                SELECT DISTINCT p.[Id]
				                                  ,[FirstName]
				                                  ,[LastName]
				                                  ,[DateOfBirth]
				                                  ,(SELECT  DATEDIFF(YEAR, [DateOfBirth],@now)
						                                   +
						                                   CASE
							                                  WHEN [DateOfBirth]<@now AND DATEADD(YEAR, DATEDIFF(YEAR,[DateOfBirth], @now), [DateOfBirth]) > @now
							                                  THEN - 1
							                                  WHEN [DateOfBirth]>@now AND DATEADD(YEAR, DATEDIFF(YEAR,[DateOfBirth], @now), [DateOfBirth]) < @now
							                                  THEN 1
							                                  ELSE 0
						                                   END
					                                FROM [dbo].[Players] WHERE Id = p.Id) as Age
				                                  ,(select stuff((
						                                SELECT ',' + [FirstName] + ' ' + [LastName]
						                                FROM [dbo].[Guardians] as g2
						                                where g2.Id in (select GuardianId 
										                                from [dbo].[PlayerGuardians]  
										                                where PlayerId = p2.id)
						                                for xml path('')
					                                ),1,1,'') as name_csv
					                                FROM [dbo].[Players] p2
					                                where p.Id = p2.Id) as Guardians
			                                FROM [dbo].[Players] p 
			                                WHERE {0}
			                                ) AS DataTbl
		                                ) AS PartNumTbl
		                                WHERE PartNum = 1
                                 ) AS OrderByTbl
                                WHERE [RowNum] >= @rowStart AND [RowNum] < @rowEnd", 
            string.Join(" AND ", filterConditionList), orderBy);
            #endregion

            var queryObject = new QueryObject { Query = sql, FilterParameters = filterParameters };
            return queryObject;
        }

        private void BuildFilterWhereClause(PlayersFilteringParametersDto dto, out List<string> filterConditionList, out List<object> filterParameters)
        {
            filterParameters = new List<object>();
            filterConditionList = new List<string> { "p.[IsActive] = 1" };

            //if (dto.CategoryId.HasValue)
            //{
            //    filterConditionList.Add("ls.[LeadSourceCategoryId] = " + dto.CategoryId);
            //}
            //else if (dto.LeadSourceId.HasValue)
            //{
            //    filterConditionList.Add("adv.[LeadSourceId] = " + dto.LeadSourceId);
            //}
            //else if (dto.AdvertisementId.HasValue)
            //{
            //    filterConditionList.Add("cost.[AdvertisementId] = " + dto.AdvertisementId);
            //}

            //FromExpenseUtcDate
            //if (dto.FromDateTime != DateTime.MinValue)
            //{
            //    filterConditionList.Add("cost.[ExpenseUtcDate] >= @fromExpenseUtcDate");

            //    filterParameters.Add(new SqlParameter
            //    {
            //        ParameterName = "fromExpenseUtcDate",
            //        SqlDbType = SqlDbType.DateTime,
            //        Value = dto.FromDateTime
            //    });
            //}

            ////ToExpenseUtcDate
            //if (dto.ToDateTime != DateTime.MinValue)
            //{
            //    filterConditionList.Add("cost.[ExpenseUtcDate] <= @toExpenseUtcDate");

            //    filterParameters.Add(new SqlParameter
            //    {
            //        ParameterName = "toExpenseUtcDate",
            //        SqlDbType = SqlDbType.DateTime,
            //        Value = dto.ToDateTime
            //    });
            //}

        }

        private void AddPagingParameters(PlayersFilteringParametersDto dto, ref List<object> filterParameters)
        {
            int numofRecords = (dto.NumofRecords > 1000) ? 1000 : dto.NumofRecords;
            int offset = (dto.PageNum - 1) * numofRecords;
            int rowEnd = offset + numofRecords;

            filterParameters.Add(new SqlParameter
            { 
                ParameterName = "rowStart",
                SqlDbType = SqlDbType.Int,
                Value = offset
            });

            filterParameters.Add(new SqlParameter
            {
                ParameterName = "rowEnd",
                SqlDbType = SqlDbType.Int,
                Value = rowEnd
            });
        }

        //private void AddPagingParameters2012(PlayersFilteringParametersDto dto, ref List<object> filterParameters)
        //{
        //    int? numofRecords = (dto.NumofRecords > 1000) ? 1000 : dto.NumofRecords;
        //    int? offset = (dto.PageNum - 1) * numofRecords;

        //    filterParameters.Add(new SqlParameter
        //    {
        //        ParameterName = "offset",
        //        SqlDbType = SqlDbType.Int,
        //        Value = offset
        //    });

        //    filterParameters.Add(new SqlParameter
        //    {
        //        ParameterName = "numofRecords",
        //        SqlDbType = SqlDbType.Int,
        //        Value = numofRecords
        //    });
        //}

    }
}