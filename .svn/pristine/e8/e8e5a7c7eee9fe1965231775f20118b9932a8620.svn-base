using System.Web.Http;
using System.Web.Http.Description;
using VYSA.Domain.Concrete;
using VYSA.WebApi.Filters;
using VYSA.WebApi.Models.Resource;
using VYSA.WebApi.Services;

namespace VYSA.WebApi.Controllers
{
    [RoutePrefix("Admin/Teams")]
    public class AdminTeamsController : BaseController
    {
        private UnitOfWork unitOfWork = new UnitOfWork();
        private TeamService teamService;
        public AdminTeamsController()
        {
            teamService = new TeamService(unitOfWork);
        }

        //[HttpGet] //Admin/api/Team
        //[Route("")]
        //public IEnumerable<Team> GetTeams() //webApi hybrid call
        //{
        //    return TeamService.GetTeams();
        //}

        [HttpGet]
        [Route("{id:int}", Name = "GetTeamById")]
        [ResponseType(typeof(TeamResourceModel))]
        public IHttpActionResult GetTeam(int id)
        {
            TeamResourceModel Team = teamService.GetTeamResourceModel(id);

            // return it if you got it
            if (Team == null)
            {
                return NotFound();
            }

            return Ok(Team);
        }

        [HttpPut]
        [Route("{id:int}")]
        [ResponseType(typeof(TeamResourceModel))]
        public IHttpActionResult UpdateTeam(int id, TeamResourceModel teamRm)
        {
            if (id != teamRm.Id)
            {
                return BadRequest();
            }

            var updatedTeamRm = teamService.UpdateTeam(teamRm, User.Identity.Name);

            if (updatedTeamRm == null)
            {
                //can't find the record to update
                return NotFound();
            }

            return Ok(updatedTeamRm);
        }


        [HttpPost]
        [Route("")]
        [ResponseType(typeof(TeamResourceModel))]
        public IHttpActionResult CreateTeam(TeamResourceModel teamRm)
        {
            var returnRm = teamService.AddTeam(teamRm, User.Identity.Name);

            //for some reason this CreatedAtRoute doesn't work like it should for me - can't find GetTeamById
            //return CreatedAtRoute("GetTeamById", new { id = newTeamDTO.Id }, newTeamDTO);
            return Ok(returnRm);
        }

        [HttpDelete]
        [Route("{id:int}")]
        [ResponseType(typeof(TeamResourceModel))]
        public IHttpActionResult DeleteTeam(int id)
        {
            var team = teamService.SoftDeleteTeam(id, User.Identity.Name);

            if (team == null)
            {
                return NotFound();
            }

            return Ok(team);
        }

        protected override void Dispose(bool disposing)
        {
            unitOfWork.Dispose();
            base.Dispose(disposing);
        }
    }

}
