using System;
using System.Linq;
using System.Web.Http;
using System.Net.Http.Formatting;
using Microsoft.Owin.Security.OAuth;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Owin;

namespace VYSA.Web.Configuration
{
    public static class WebApiConfig
    {
        // http://www.asp.net/web-api/overview/web-api-routing-and-actions/routing-in-aspnet-web-api
        public static void Configure(IAppBuilder app)
        {
            // Web API configuration and services
            var config = new HttpConfiguration();

            config.SuppressDefaultHostAuthentication();
            config.Filters.Add(new HostAuthenticationFilter(OAuthDefaults.AuthenticationType));

            // Web API routes
            config.MapHttpAttributeRoutes();

            // Changed the routeTemplate so that methods/services would be identified by their action, and not by their parameters.
            // Otherwise getting conflicts if I had more than one GET service, with identical parameter options, but different return data.
            // Adding the action to the routeTemplte corrects this issue.
            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{action}/{id}", //routeTemplate: "api/{controller}/{id}","api/{controller}/{action}/{id}"
                defaults: new { id = RouteParameter.Optional }
            );

            //config.Routes.MapHttpRoute(
            //    name: "Admin/DefaultApi",
            //    routeTemplate: "Admin/api/{controller}/{id}",
            //    defaults: new { area = "Admin", id = RouteParameter.Optional }
            //    );

            // Change the JSON Formatter to use camelCase
            var jsonFormatter = config.Formatters.OfType<JsonMediaTypeFormatter>().First();
            jsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
            jsonFormatter.SerializerSettings.DateFormatHandling = DateFormatHandling.IsoDateFormat;
            jsonFormatter.SerializerSettings.DateTimeZoneHandling = DateTimeZoneHandling.Utc;
            
            app.UseWebApi(config);
        }
    }
}