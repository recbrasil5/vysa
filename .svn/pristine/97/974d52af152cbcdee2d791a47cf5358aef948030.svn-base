using System;
using System.Collections.Generic;
using System.Configuration.Provider;
using System.Linq;
using System.Web.Security;
using VYSA.Domain.Abstract;
using VYSA.Domain.Concrete;
using VYSA.Domain.Entities;

namespace VYSA.WebApi.Infrastructure
{
    public class EFRoleProvider : RoleProvider
    {
        private readonly IUnitOfWork _unitOfWork;
        private string _applicationName = "VYSA";

        public EFRoleProvider() : this(new UnitOfWork()) { }

        public EFRoleProvider(IUnitOfWork unitOfWork)
        {
            this._unitOfWork = unitOfWork;
        }

        public override string ApplicationName
        {
            get
            {
                return _applicationName;
            }
            set
            {
                _applicationName = value;
            }
        }

        public override void AddUsersToRoles(string[] usernames, string[] roleNames)
        {
            if (roleNames.Length != 1)
            {
                throw new ArgumentException("roleNames should only contain one element", "roleNames");
            }

            AddUsersToRole(usernames, roleNames[0]);
        }

        public override void CreateRole(string roleName)
        {
            var role = new Role
            {
                Name = roleName,
                IsActive = true,
                CreatedDateUtc = DateTime.UtcNow,
                LastUpdateUtc = DateTime.UtcNow
            };

            _unitOfWork.RoleRepository.Save(role);
        }

        public override bool DeleteRole(string roleName, bool throwOnPopulatedRole)
        {
            Role role = _unitOfWork.RoleRepository.GetRole(roleName);
            if (null != role)
            {
                if (throwOnPopulatedRole && role.Users.Any())
                {
                    throw new ProviderException();
                }
                _unitOfWork.RoleRepository.Delete(role);
                return true;
            }
            return false;
        }

        public override string[] FindUsersInRole(string roleName, string usernameToMatch)
        {
            bool matchUserName = !string.IsNullOrEmpty(usernameToMatch);
            IList<string> users = new List<string>();
            Role role = _unitOfWork.RoleRepository.GetRole(roleName);
            
            if (null != role)
            {
                foreach (User user in role.Users)
                {
                    if (!matchUserName || (user.UserName.Contains(usernameToMatch)))
                    {
                        users.Add(user.UserName);
                    }
                }
            }
            return users.ToArray();
        }

        public override string[] GetAllRoles()
        {
            IList<string> roles = new List<string>();

            foreach (Role role in _unitOfWork.RoleRepository.Roles.AsEnumerable())
	        {
                roles.Add(role.Name);
	        }

            return roles.ToArray();
        }

        public override string[] GetRolesForUser(string username)
        {
            User user = _unitOfWork.UserRepository.GetUser(username);
            if (null != user)
            {
                return new string[] { user.Role.Name };
            }
            return new string[0];
        }

        public override string[] GetUsersInRole(string roleName)
        {
            //return unitOfWork.UserRepository.GetUsersInRole(roleName);
            throw new NotImplementedException();
        }

        public override bool IsUserInRole(string username, string roleName)
        {
            return GetRolesForUser(username).Contains(roleName);
            //return GetUsersInRole(roleName).Contains(username);
        }

        public override void RemoveUsersFromRoles(string[] usernames, string[] roleNames)
        {
            if (roleNames.Length != 1)
            {
                throw new ArgumentException("roleNames should only contain one element", "roleNames");
            }

            RemoveUsersFromRole(usernames, roleNames[0]);
        }

        public override bool RoleExists(string roleName)
        {
            return _unitOfWork.RoleRepository.Roles.Any(r => r.Name.ToLower() == roleName.ToLower());
        }

        private void RemoveUsersFromRole(string[] usernames, string roleName)
        {
            Role role = _unitOfWork.RoleRepository.GetRole(roleName);

            foreach (string username in usernames)
            {
                User user = _unitOfWork.UserRepository.GetUser(username);
                if (null != user)
                {
                    role.Users.Remove(user);
                    _unitOfWork.RoleRepository.Save(role);
                }
            }
        }

        private void AddUsersToRole(string[] usernames, string roleName)
        {
            Role role = _unitOfWork.RoleRepository.GetRole(roleName);

            foreach (string username in usernames)
            {
                User user = _unitOfWork.UserRepository.GetUser(username);
                if (null != user)
                {
                    if(role.Users == null)
                        role.Users = new List<User>(); //don't new up the list unless it's empty

                    role.Users.Add(user);
                }
            }
            _unitOfWork.RoleRepository.Save(role);
        }
    }
}