using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using VYSA.Domain.Concrete;
using VYSA.WebApi.Models;
using VYSA.WebApi.Services;

namespace VYSA.WebApi.Controllers
{
    [RoutePrefix("Admin/Guardians")]
    [Authorize(Roles = "Admin, SuperAdmin")]
    public class AdminGuardiansController : ApiController
    {
        private UnitOfWork unitOfWork = new UnitOfWork();
        private GuardianService guardianService;
        public AdminGuardiansController()
        {
            guardianService = new GuardianService(unitOfWork);
        }

        [HttpPost]
        [Route("Filter")]
        [ResponseType(typeof(GuardianFilterDTO))]
        public IHttpActionResult Filter(FilterDTO filter)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var list = filter.LookupId == 0 ?  //if the lookupId == 0, this means the UI is in AddNew mode and there is no lookupId
                guardianService.GetGuardians() :
                guardianService.GetGuardiansByFilter(filter);

            return Ok(new GuardianFilterDTO { Guardians = list});
        }

        [HttpGet]
        [Route("")]
        [ResponseType(typeof(IEnumerable<GuardianDTO>))]
        public IEnumerable<GuardianDTO> GetGuardians() 
        {
            return guardianService.GetGuardians();
        }

        [HttpGet]
        [Route("{id:int}", Name = "GetGuardianById")]
        [ResponseType(typeof(GuardianDTO))]
        public IHttpActionResult GetGuardian(int id)
        {
            GuardianDTO guardianDto = guardianService.GetGuardianDto(id);

            // return it if you got it
            if (guardianDto == null)
            {
                return NotFound();
            }

            return Ok(guardianDto);
        }

        

        [HttpPut]
        [Route("{id:int}")]
        [ResponseType(typeof(GuardianDTO))]
        public IHttpActionResult UpdateGuardian(int id, GuardianDTO GuardianDTO)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != GuardianDTO.Id)
            {
                return BadRequest();
            }

            var updatedGuardianDTO = guardianService.UpdateGuardian(GuardianDTO, User.Identity.Name);

            if (updatedGuardianDTO == null)
            {
                //can't find the record to update
                return NotFound();
            }

            return Ok(updatedGuardianDTO);
        }


        [HttpPost]
        [Route("")]
        [ResponseType(typeof(GuardianDTO))]
        public IHttpActionResult CreateGuardian(GuardianDTO GuardianDTO)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var newGuardianDTO = guardianService.AddGuardian(GuardianDTO, User.Identity.Name);

            //for some reason this CreatedAtRoute doesn't work like it should for me - can't find GetGuardianById
            //return CreatedAtRoute("GetGuardianById", new { id = newGuardianDTO.Id }, newGuardianDTO);
            return Ok(newGuardianDTO);
        }

        [HttpDelete]
        [Route("{id:int}")]
        [ResponseType(typeof(GuardianDTO))]
        public IHttpActionResult DeleteGuardian(int id)
        {
            var Guardian = guardianService.SoftDeleteGuardian(id, User.Identity.Name);
            if (Guardian == null)
            {
                return NotFound();
            }

            return Ok(Guardian);
        }

        protected override void Dispose(bool disposing)
        {
            unitOfWork.Dispose();
            base.Dispose(disposing);
        }
    }
}
