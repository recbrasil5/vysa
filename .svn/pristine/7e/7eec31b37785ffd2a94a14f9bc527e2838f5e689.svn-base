using System.Web.Http;
using System.Web.Http.Description;
using VYSA.Domain.Concrete;
using VYSA.WebApi.Filters;
using VYSA.WebApi.Models;
using VYSA.WebApi.Models.Resource;
using VYSA.WebApi.Services;

namespace VYSA.WebApi.Controllers
{
    [ApiExceptionFilter]
    [ModelValidator]
    [RoutePrefix("Admin/PlayerGuardians")]
    [Authorize(Roles = "Admin, SuperAdmin")]
    public class AdminPlayerGuardiansController : ApiController
    {
        private UnitOfWork unitOfWork = new UnitOfWork();
        private PlayerGuardianService playerGuardianService;
        public AdminPlayerGuardiansController()
        {
            playerGuardianService = new PlayerGuardianService(unitOfWork);
        }        

        //PlayerGuardians
        [HttpPost]
        [Route("")]
        [ResponseType(typeof(PlayerGuardianResourceModel))]
        public IHttpActionResult CreatePlayerGuardian(PlayerGuardianResourceModel playerGuardianDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var newPlayerGuardianDto = playerGuardianService.AddPlayerGuardian(playerGuardianDto, User.Identity.Name);

            //for some reason this CreatedAtRoute doesn't work like it should for me - can't find GetPlayerById
            //return CreatedAtRoute("GetPlayerById", new { id = newPlayerDto.Id }, newPlayerDto);
            return Ok(newPlayerGuardianDto);
        }

        [HttpPut]
        [Route("{id:int}")]
        [ResponseType(typeof(PlayerGuardianResourceModel))]
        public IHttpActionResult UpdatePlayerGuardian(int id, PlayerGuardianResourceModel playerGuardianDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != playerGuardianDto.Id)
            {
                return BadRequest();
            }

            var updatedPlayerGuardianDto = playerGuardianService.UpdatePlayerGuardian(playerGuardianDto, User.Identity.Name);

            if (updatedPlayerGuardianDto == null)
            {
                //can't find the record to update
                return NotFound();
            }

            return Ok(updatedPlayerGuardianDto);
        }

        [HttpDelete]
        [Route("{id:int}")]
        [ResponseType(typeof(PlayerGuardianResourceModel))]
        public IHttpActionResult DeletePlayerGuardian(int id)
        {
            var playerGuardian = playerGuardianService.SoftDeletePlayerGuardian(id, User.Identity.Name);
            if (playerGuardian == null)
            {
                return NotFound();
            }

            return Ok(playerGuardian);
        }

        protected override void Dispose(bool disposing)
        {
            unitOfWork.Dispose();
            base.Dispose(disposing);
        }
    }
}
